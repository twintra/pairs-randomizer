import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css'

export default function Home() {
  const [textFieldValue, setTextFieldValue] = useState("");
  const [namesPool, setNamesPool] = useState([]);
  const [user, setUser] = useState("");
  const [randomedName, setRandomedName] = useState("");
  const [disableRandomButton, setDisableRandomButton] = useState(true);

  const nameStyles = {
    color: "blue",
    fontSize: "20px",
    fontWeight: "bold"
  }

  useEffect(() => {
    loadData()
  }, [])

  

  function loadData(){
    fetch('/api/getNamesPool')
      .then((response) => response.json())
      .then((data) => {
        console.log(data);
        setNamesPool(data.names_pool)
      })
      .catch(e=>console.log(e));
  }

  


  async function generateName() {
    // Set up an array of names
    var names = namesPool;

    // Generate a random number between 0 and the number of names
    var index = Math.floor(Math.random() * names.length);

    // Get the name at the random index
    var randomName = names[index];

    // Display the name in the paragraph element
    setRandomedName(randomName);
    setDisableRandomButton(true);

    const url = "/api/addNewPaired"
    const pairedName = {
      "name": user,
      "pair": randomName,
    }

    await fetch(url, {
      method: 'POST', // *GET, POST, PUT, DELETE, etc.
      mode: 'same-origin', // no-cors, *cors, same-origin
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(pairedName) // body data type must match "Content-Type" header
    })
    .then(res => res.json())
    .then(data=> {
      setTimeout(loadData, 100);
      return data
    });
  }
  function onTextFieldChange(e) {
    setTextFieldValue(e.target.value)
  }

  function onTextFieldKeyDown(e) {
    if (e.nativeEvent.key === "Enter") {
      handleButton()
    }
  }

  function handleButton() {
    setUser(textFieldValue);
    setRandomedName("");
    setDisableRandomButton(false);
  }

  return (
    <>
      <Head>
        <title>Random Name</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <h1>Random Name Generator test</h1>


        <span style={nameStyles}>{user}</span> {randomedName ? <>paired with <span style={nameStyles}>{randomedName}</span> </> : null}
        <p>
          <input onChange={onTextFieldChange} onKeyDown={onTextFieldKeyDown} type="text" />
          <button onClick={handleButton} >Confirm</button>
        </p>
        <button disabled={disableRandomButton} onClick={generateName}>Get your pair</button>

        {/* {[].map((value, index), ()=>{
          return (
            <>value</>
          )
        })} */}
        <div>Name Remained</div>
        {namesPool.map((value, index) => {
          return (
            <li key={index}>{value}</li>
          )
        })}
      </div>
    </>
  )
}
